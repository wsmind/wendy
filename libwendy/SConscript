import os

Import("baseEnvironment")

env = baseEnvironment.Clone()

env.Append(CPPPATH = ["src"])
env.Append(CPPDEFINES = ["BUILDING_WENDY"])

if os.name == "nt":
	env.Append(CPPPATH = ["../dependencies/curl/include"])
	env.Append(LIBPATH = ["../$BUILDDIR/bin"])
	env.Append(CPPDEFINES = ["UNICODE", "_UNICODE"])
	env.Append(LIBS = ["ws2_32"])

if os.name == "posix":
	env.Append(LIBS = ["pthread"])

env.Append(CPPPATH = ["../dependencies/cJSON"])
env.Append(LIBS = ["cJSON", "curl"])

sources = env.Glob("src/wendy/*.cpp")
objects = []
for file in sources:
	objects += [env.SharedObject("../$BUILDDIR/obj/libwendy/" + os.path.splitext(str(file))[0], file)]

env.SharedLibrary("../$BUILDDIR/bin/wendy", objects)

testEnv = baseEnvironment.Clone()
testEnv.Append(CPPPATH = ["src"])
testEnv.Append(LIBPATH = ["../$BUILDDIR/bin"])
testEnv.Append(LIBS = ["wendy"])
if testEnv["CC"] == "cl":
	testEnv.Append(CPPFLAGS = ["/EHsc", "/Z7"])
testEnv.Program("../$BUILDDIR/bin/test-client", env.SharedObject("../$BUILDDIR/obj/libwendy/" + os.path.splitext("tests/client.cpp")[0], "tests/client.cpp"))
testEnv.Program("../$BUILDDIR/bin/test-http", env.SharedObject("../$BUILDDIR/obj/libwendy/" + os.path.splitext("tests/http.cpp")[0], "tests/http.cpp"))

